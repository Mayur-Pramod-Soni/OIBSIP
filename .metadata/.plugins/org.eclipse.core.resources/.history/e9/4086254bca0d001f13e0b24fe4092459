package com.sarthi.controller;

import java.io.IOException;
import java.util.List;

import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;

import com.sarthi.model.Tourist;
import com.sarthi.payloads.ApiResponse;
import com.sarthi.service.TouristService;


public class ToursitController {
		

	@Autowired
	private TouristService touristService;

	@PostMapping("/tourists/registration/")
	public ResponseEntity<Tourist> addGuide(@Validated @RequestBody Tourist tourist) { // @Validated
		try {

//			guide.setRoles(); //

	    	BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder(); //
	    	String encodedPassword = passwordEncoder.encode(tourist.getPassword()); // 
	    	tourist.setPassword(encodedPassword); // 
//	   
			System.out.println("User : " + tourist);

			Tourist addedTourist = touristService.addTourist(tourist);
			return ResponseEntity.status(HttpStatus.CREATED).body(addedTourist);
		} catch (Exception e) {
			System.out.println("Error");
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
		}
	}
	
	@GetMapping("/tourists/all")
	public ResponseEntity<List<Tourist>> getAllToursits() {
		try {
			List<Tourist> allTourists = touristService.getAllToursits();

			if (allTourists.isEmpty()) {
				return ResponseEntity.noContent().build();
			}

			return ResponseEntity.ok(allTourists);

		} catch (Exception e) {
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
		}
	}

	@PutMapping("/tourist/{id}/")
	public ResponseEntity<Tourist> updateTouristDetails(@PathVariable Long id, @RequestBody Tourist touristDetails) {

		if (id != touristDetails.getTourist_id())
			return new ResponseEntity<Tourist>(HttpStatus.BAD_REQUEST);

//		if(!guideService.existsById(id))
//			return new ResponseEntity<Guide>(HttpStatus.NOT_FOUND);

		Tourist updatedToursistDetails = touristService.updateTouristDetails(id, touristDetails);
		return new ResponseEntity<Tourist>(updatedToursistDetails, HttpStatus.OK);

	}

	@GetMapping("/tourist/{id}")
	public ResponseEntity<Tourist> getTouristDetailsById(@PathVariable Long id) {
		return ResponseEntity.ok(this.touristService.getTouristDetailsById(id));
//		try {
//			return ResponseEntity.ok(guideService.getGuideDetailsById(id));
//		} catch (Exception e) {
//			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
//		}
	}

	@DeleteMapping("/tourist/{id}")
	public ResponseEntity<ApiResponse> deleteTouristDetails(@PathVariable Long id) {
		this.touristService.deleteTouristDetails(id);
//		return new ResponseEntity<String>("User Details deleted successfully", HttpStatus.OK);
		return new ResponseEntity<ApiResponse>(new ApiResponse("User deleted Successfully", true), HttpStatus.OK);
	}

	@GetMapping("/")
	public void index(HttpServletResponse response) throws IOException {
		ClassPathResource resource = new ClassPathResource("static/index.html");
		response.getOutputStream().write(resource.getInputStream().readAllBytes());

	}

}

